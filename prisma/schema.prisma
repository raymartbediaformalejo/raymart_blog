// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  adminId      String?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  phone_number  String?
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]

  @@unique([email, username])
  @@map("User")
}

model Blog {
  id           String         @id @default(cuid())
  category     Category[]
  topic        Topic[]
  title        String?
  summary      String?
  cover_photo  String?
  content      String?
  status_id    Status         @default(DRAFT)
  visibility   Visibility     @default(PUBLIC)
  is_featured  Boolean?
  related_blog Related_blog[] @relation("RelatedBlogs")
}

model TIL {
  id          String     @id @default(cuid())
  category    Category[]
  topic       Topic[]
  title       String?
  summary     String?
  cover_photo String?
  content     String?
  status_id   Status     @default(DRAFT)
  visibility  Visibility @default(PUBLIC)
}

model Related_blog {
  related_blog    Blog   @relation("RelatedBlogs", fields: [related_blog_id], references: [id])
  related_blog_id String

  @@id([related_blog_id])
}

model Category {
  id   String @id @default(cuid())
  name String
  blog Blog[]
  til  TIL[]
}

model Topic {
  id   String @id @default(cuid())
  name String
  blog Blog[]
  til  TIL[]
}

enum Role {
  ADMIN
}

enum Status {
  DRAFT
  PUBLISH
}

enum Visibility {
  PUBLIC
  PRIVATE
}
